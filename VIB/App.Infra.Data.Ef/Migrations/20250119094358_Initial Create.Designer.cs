// <auto-generated />
using System;
using App.Infra.Data.Ef;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace App.Infra.Data.Ef.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250119094358_Initial Create")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("App.Domain.Core.Entities.Inspection.Appointment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CarId")
                        .HasColumnType("int");

                    b.Property<int>("CenterId")
                        .HasColumnType("int");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<int>("TimeOfDaySlotId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CarId");

                    b.HasIndex("CenterId");

                    b.HasIndex("TimeOfDaySlotId");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Inspection.Center", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.ToTable("Centers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "آدرس مرکز یک",
                            ContactNumber = "xxxxxxxxx",
                            DayId = 1,
                            Name = "مرکز 1"
                        },
                        new
                        {
                            Id = 2,
                            Address = "آدرس مرکز دو",
                            ContactNumber = "xxxxxxxxx",
                            DayId = 2,
                            Name = "مرکز 2"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Inspection.Day", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<int>("TimeSlotsPerDay")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Days");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Date = new DateTime(2025, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeSlotsPerDay = 10
                        },
                        new
                        {
                            Id = 2,
                            Date = new DateTime(2025, 2, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            TimeSlotsPerDay = 10
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Inspection.TimeOfDaySlot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DayId")
                        .HasColumnType("int");

                    b.Property<bool>("IsBooked")
                        .HasColumnType("bit");

                    b.Property<TimeSpan>("Time")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("DayId");

                    b.ToTable("Slots");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DayId = 1,
                            IsBooked = false,
                            Time = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 2,
                            DayId = 1,
                            IsBooked = false,
                            Time = new TimeSpan(0, 10, 0, 0, 0)
                        },
                        new
                        {
                            Id = 3,
                            DayId = 2,
                            IsBooked = false,
                            Time = new TimeSpan(0, 9, 0, 0, 0)
                        },
                        new
                        {
                            Id = 4,
                            DayId = 2,
                            IsBooked = false,
                            Time = new TimeSpan(0, 10, 0, 0, 0)
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.Operator", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Operators");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Password = "Admin@123",
                            UserName = "Admin"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int");

                    b.Property<string>("IdentificationNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CreatedAt = new DateTime(2025, 1, 19, 13, 13, 58, 228, DateTimeKind.Local).AddTicks(5763),
                            DateOfBirth = new DateTime(1994, 8, 27, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            FirstName = "سینا",
                            Gender = 1,
                            IdentificationNumber = "3241327892",
                            LastName = "ضرابی",
                            Password = "sina@1994zarabi",
                            PhoneNumber = "09367559646",
                            Username = "sinazarabi"
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Vehicle.Car", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Make")
                        .HasColumnType("int");

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("Year")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LicensePlate = "ABC-1234",
                            Make = 1,
                            Model = "سمند",
                            UserId = 1,
                            Year = 2021
                        });
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Inspection.Appointment", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Vehicle.Car", "Car")
                        .WithMany()
                        .HasForeignKey("CarId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.Inspection.Center", "Center")
                        .WithMany()
                        .HasForeignKey("CenterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("App.Domain.Core.Entities.Inspection.TimeOfDaySlot", "TimeOfDaySlot")
                        .WithMany()
                        .HasForeignKey("TimeOfDaySlotId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Car");

                    b.Navigation("Center");

                    b.Navigation("TimeOfDaySlot");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Inspection.Center", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Inspection.Day", "Day")
                        .WithMany("Centers")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Inspection.TimeOfDaySlot", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Inspection.Day", "Day")
                        .WithMany("Slots")
                        .HasForeignKey("DayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Day");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Vehicle.Car", b =>
                {
                    b.HasOne("App.Domain.Core.Entities.Users.User", "User")
                        .WithMany("cars")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Inspection.Day", b =>
                {
                    b.Navigation("Centers");

                    b.Navigation("Slots");
                });

            modelBuilder.Entity("App.Domain.Core.Entities.Users.User", b =>
                {
                    b.Navigation("cars");
                });
#pragma warning restore 612, 618
        }
    }
}
